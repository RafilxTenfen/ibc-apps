// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/faddat/composable-cosmos/x/transfermiddleware/types/interface.go
//
// Generated by this command:
//
//	mockgen -package=mock -mock_names=TransferKeeper=MockTransferMiddlewareKeeper,BankKeeper=MockTransferMiddlewareBankKeeper -self_package=github.com/cosmos/ibc-apps/v7/middleware/packet-forward-middleware/packetforward/types -destination=./test/mock/transfermiddleware_keeper.go -source=/Users/faddat/composable-cosmos/x/transfermiddleware/types/interface.go TransferKeeper,BankKeeper,TransferMiddlewareKeeper
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/notional-labs/composable/v6/x/transfermiddleware/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferMiddlewareKeeper is a mock of TransferMiddlewareKeeper interface.
type MockTransferMiddlewareKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTransferMiddlewareKeeperMockRecorder
}

// MockTransferMiddlewareKeeperMockRecorder is the mock recorder for MockTransferMiddlewareKeeper.
type MockTransferMiddlewareKeeperMockRecorder struct {
	mock *MockTransferMiddlewareKeeper
}

// NewMockTransferMiddlewareKeeper creates a new mock instance.
func NewMockTransferMiddlewareKeeper(ctrl *gomock.Controller) *MockTransferMiddlewareKeeper {
	mock := &MockTransferMiddlewareKeeper{ctrl: ctrl}
	mock.recorder = &MockTransferMiddlewareKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferMiddlewareKeeper) EXPECT() *MockTransferMiddlewareKeeperMockRecorder {
	return m.recorder
}

// GetKeyByRlyAddress mocks base method.
func (m *MockTransferMiddlewareKeeper) GetKeyByRlyAddress(rlyAddress string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByRlyAddress", rlyAddress)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetKeyByRlyAddress indicates an expected call of GetKeyByRlyAddress.
func (mr *MockTransferMiddlewareKeeperMockRecorder) GetKeyByRlyAddress(rlyAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByRlyAddress", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).GetKeyByRlyAddress), rlyAddress)
}

// GetKeyParachainIBCTokenRemoveListByNativeDenom mocks base method.
func (m *MockTransferMiddlewareKeeper) GetKeyParachainIBCTokenRemoveListByNativeDenom(nativeDenom string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyParachainIBCTokenRemoveListByNativeDenom", nativeDenom)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetKeyParachainIBCTokenRemoveListByNativeDenom indicates an expected call of GetKeyParachainIBCTokenRemoveListByNativeDenom.
func (mr *MockTransferMiddlewareKeeperMockRecorder) GetKeyParachainIBCTokenRemoveListByNativeDenom(nativeDenom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyParachainIBCTokenRemoveListByNativeDenom", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).GetKeyParachainIBCTokenRemoveListByNativeDenom), nativeDenom)
}

// GetNativeDenomByIBCDenomSecondaryIndex mocks base method.
func (m *MockTransferMiddlewareKeeper) GetNativeDenomByIBCDenomSecondaryIndex(ctx types.Context, ibcDenom string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNativeDenomByIBCDenomSecondaryIndex", ctx, ibcDenom)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNativeDenomByIBCDenomSecondaryIndex indicates an expected call of GetNativeDenomByIBCDenomSecondaryIndex.
func (mr *MockTransferMiddlewareKeeperMockRecorder) GetNativeDenomByIBCDenomSecondaryIndex(ctx, ibcDenom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNativeDenomByIBCDenomSecondaryIndex", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).GetNativeDenomByIBCDenomSecondaryIndex), ctx, ibcDenom)
}

// GetParachainIBCTokenInfoByAssetID mocks base method.
func (m *MockTransferMiddlewareKeeper) GetParachainIBCTokenInfoByAssetID(ctx types.Context, assetID string) types0.ParachainIBCTokenInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParachainIBCTokenInfoByAssetID", ctx, assetID)
	ret0, _ := ret[0].(types0.ParachainIBCTokenInfo)
	return ret0
}

// GetParachainIBCTokenInfoByAssetID indicates an expected call of GetParachainIBCTokenInfoByAssetID.
func (mr *MockTransferMiddlewareKeeperMockRecorder) GetParachainIBCTokenInfoByAssetID(ctx, assetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParachainIBCTokenInfoByAssetID", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).GetParachainIBCTokenInfoByAssetID), ctx, assetID)
}

// GetParachainIBCTokenInfoByNativeDenom mocks base method.
func (m *MockTransferMiddlewareKeeper) GetParachainIBCTokenInfoByNativeDenom(ctx types.Context, nativeDenom string) types0.ParachainIBCTokenInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParachainIBCTokenInfoByNativeDenom", ctx, nativeDenom)
	ret0, _ := ret[0].(types0.ParachainIBCTokenInfo)
	return ret0
}

// GetParachainIBCTokenInfoByNativeDenom indicates an expected call of GetParachainIBCTokenInfoByNativeDenom.
func (mr *MockTransferMiddlewareKeeperMockRecorder) GetParachainIBCTokenInfoByNativeDenom(ctx, nativeDenom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParachainIBCTokenInfoByNativeDenom", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).GetParachainIBCTokenInfoByNativeDenom), ctx, nativeDenom)
}

// HasParachainIBCTokenInfoByAssetID mocks base method.
func (m *MockTransferMiddlewareKeeper) HasParachainIBCTokenInfoByAssetID(ctx types.Context, assetID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasParachainIBCTokenInfoByAssetID", ctx, assetID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasParachainIBCTokenInfoByAssetID indicates an expected call of HasParachainIBCTokenInfoByAssetID.
func (mr *MockTransferMiddlewareKeeperMockRecorder) HasParachainIBCTokenInfoByAssetID(ctx, assetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasParachainIBCTokenInfoByAssetID", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).HasParachainIBCTokenInfoByAssetID), ctx, assetID)
}

// HasParachainIBCTokenInfoByNativeDenom mocks base method.
func (m *MockTransferMiddlewareKeeper) HasParachainIBCTokenInfoByNativeDenom(ctx types.Context, nativeDenom string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasParachainIBCTokenInfoByNativeDenom", ctx, nativeDenom)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasParachainIBCTokenInfoByNativeDenom indicates an expected call of HasParachainIBCTokenInfoByNativeDenom.
func (mr *MockTransferMiddlewareKeeperMockRecorder) HasParachainIBCTokenInfoByNativeDenom(ctx, nativeDenom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasParachainIBCTokenInfoByNativeDenom", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).HasParachainIBCTokenInfoByNativeDenom), ctx, nativeDenom)
}

// HasRlyAddress mocks base method.
func (m *MockTransferMiddlewareKeeper) HasRlyAddress(ctx types.Context, rlyAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRlyAddress", ctx, rlyAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRlyAddress indicates an expected call of HasRlyAddress.
func (mr *MockTransferMiddlewareKeeperMockRecorder) HasRlyAddress(ctx, rlyAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRlyAddress", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).HasRlyAddress), ctx, rlyAddress)
}

// IterateAllowRlyAddress mocks base method.
func (m *MockTransferMiddlewareKeeper) IterateAllowRlyAddress(ctx types.Context, cb func(string) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IterateAllowRlyAddress", ctx, cb)
}

// IterateAllowRlyAddress indicates an expected call of IterateAllowRlyAddress.
func (mr *MockTransferMiddlewareKeeperMockRecorder) IterateAllowRlyAddress(ctx, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IterateAllowRlyAddress", reflect.TypeOf((*MockTransferMiddlewareKeeper)(nil).IterateAllowRlyAddress), ctx, cb)
}
